/**
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 *
 * Copyright (c) 2021 Peter Grajcar
 */
pakiet syntax.test;

zaimportuj jawa.io.StrumieńWydruku;

publiczna klasa TestSkładni realizuje I {

    całość numer;

    publiczny TestSkładni() {
        A<C>.KlasaWewnętrzna c;

        A<C> ac = nowy A<>();
        A<B<C>> abc = nowy A<>();

        Łańcuch l = "Test";
        System.wyjście.wydrukovać(l);

        SyntaxTest.<Łańcuch>cfT(l);
    }

    publiczny TestSkładni(długy d) {
        to();
        całość a, b, c;
        a = (b * (c + (całość) d)) % 13;
        to.numer = a;
    }

    prywatny całość cfcc(całość a, całość b) {
        jeżeli (a < b) {
            zwróć b - a;
        }
        zwróć a - b;
    }

    @Nadpisanie
    void f() {
        znak[] pole = { };
    }

    całość cfvc(całość ...n) {
        całość s = 0;
        dla(całość i = 0; i < n.długość; ++i) {
            s += n[i];
            ++i;
        }
        zwróć s;
    }

    publiczny statyczny <T> całość cfT(T t) {

    }

}

@FunkcjonalneMiędzymordzie
międzymordzie I {
    void f();
}

klasa A<T> {

    publiczna klasa KlasaWewnętrzna {

    }

}

klasa B<T przedłuża C> {

}

klasa C przedłuża D {

    publiczny C() {
        nadzbiór();
    }

}

klasa D {

}
